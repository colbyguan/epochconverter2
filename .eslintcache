[{"/Users/colbert.guan/other/epochconverter/src/index.js":"1","/Users/colbert.guan/other/epochconverter/src/App.js":"2","/Users/colbert.guan/other/epochconverter/src/reportWebVitals.js":"3","/Users/colbert.guan/other/epochconverter/src/components/CopyableRow.js":"4","/Users/colbert.guan/other/epochconverter/src/components/CopyIcon.js":"5","/Users/colbert.guan/other/epochconverter/src/helpers.js":"6"},{"size":500,"mtime":1606867416876,"results":"7","hashOfConfig":"8"},{"size":5295,"mtime":1608413072247,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1606867416877,"results":"10","hashOfConfig":"8"},{"size":2862,"mtime":1607295045354,"results":"11","hashOfConfig":"8"},{"size":636,"mtime":1607204648644,"results":"12","hashOfConfig":"8"},{"size":566,"mtime":1607292298431,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"jpkcj2",{"filePath":"17","messages":"18","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/colbert.guan/other/epochconverter/src/index.js",[],["29","30"],"/Users/colbert.guan/other/epochconverter/src/App.js",["31","32","33","34","35","36","37","38","39"],"/Users/colbert.guan/other/epochconverter/src/reportWebVitals.js",[],"/Users/colbert.guan/other/epochconverter/src/components/CopyableRow.js",["40"],"import React, { useState } from \"react\";\nimport CopyIcon from \"./CopyIcon\";\nimport copy from 'copy-to-clipboard';\n\nconst CopyableRow = (props) => {\n  let startBorderColor = borderColorFromOffset(props.startOffset);\n  let endBorderColor = borderColorFromOffset(props.endOffset);\n  if (props.disableBorder === true) {\n    startBorderColor = \"border-white\";\n    endBorderColor = \"border-white\";\n  }\n  const [hovered, setHovered] = useState(false);\n\n  let startTime = timeTextFromNowAndOffset(props.now, props.startOffset);\n  let endTime = timeTextFromNowAndOffset(props.now, props.endOffset);\n\n  const handleEnter = (e) => {\n    setHovered(true);\n  };\n  const handleLeave = (e) => {\n    setHovered(false);\n  };\n  const copyStartEnd = () => {\n    const toCopy = startTime + \":\" + endTime;\n    copy(toCopy);\n    props.handleCopySuccess(toCopy);\n  };\n\n  return (\n    <div className={\"grid grid-cols-3 px-2 \" + (hovered ? \"gap-0\" : \"gap-2\")}>\n      <div\n        onMouseEnter={handleEnter}\n        onMouseLeave={handleLeave}\n        onClick={copyStartEnd}\n        className=\"group cursor-pointer hover:bg-yellow-200 rounded-md flex flex-row m-1 px-2 py-1\"\n      >\n        <CopyIcon />\n        start:end\n      </div>\n      <CopyableTime\n        borderColor={startBorderColor}\n        alignLeft={true}\n        ts={startTime}\n        hovered={hovered}\n        handleCopySuccess={props.handleCopySuccess}\n        handleCopyFail={props.handleCopyFail}\n      />\n      <CopyableTime\n        borderColor={endBorderColor}\n        ts={endTime}\n        hovered={hovered}\n        handleCopySuccess={props.handleCopySuccess}\n        handleCopyFail={props.handleCopyFail}\n      />\n    </div>\n  );\n};\n\nconst borderColorFromOffset = (offset) => {\n  if (offset < 0) {\n    return \"border-red-500\";\n  } else if (offset === 0) {\n    return \"border-gray-300\";\n  } else {\n    return \"border-green-500\";\n  }\n};\nconst timeTextFromNowAndOffset = (now, offset) => {\n  if (offset < 0) {\n    return \"bad input\";\n  } else {\n    return now - offset;\n  }\n};\n\nconst CopyableTime = (props) => {\n  const hovered = props.hovered;\n  const ts = props.ts;\n  const alignLeft = props.alignLeft;\n\n  const copyTs = () => {\n    console.log(props.ts);\n    copy(props.ts);\n    props.handleCopySuccess(props.ts);\n  };\n\n  return (\n    <div\n      onClick={copyTs}\n      className={\n        \"group border w-full cursor-pointer hover:bg-blue-200 flex flex-row my-1 px-2 py-1 \" +\n        (hovered\n          ? \"bg-yellow-300 rounded-none border-yellow-300 \"\n          : props.borderColor + \" rounded-md \") +\n        (hovered && alignLeft ? \"rounded-l-md \" : \"rounded-r-md\")\n      }\n    >\n      {!hovered ? <CopyIcon /> : \"\"}\n      <div className={\"w-full \" + (hovered && alignLeft ? \"text-right\" : \"\")}>\n        {props.ts + (hovered && alignLeft ? \" : \" : \"\")}\n      </div>\n    </div>\n  );\n};\n\nexport default CopyableRow;\n","/Users/colbert.guan/other/epochconverter/src/components/CopyIcon.js",["41"],"import React, { useState } from \"react\";\n\nconst CopyIcon = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n      width=\"20px\"\n      height=\"20px\"\n      className=\"transform transition mt-0.5 text-gray-600 group-hover:text-black group-hover:scale-110\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={2}\n        d=\"M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z\"\n      />\n    </svg>\n  );\n};\n\nexport default CopyIcon;\n","/Users/colbert.guan/other/epochconverter/src/helpers.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":2,"column":8,"nodeType":"48","messageId":"49","endLine":2,"endColumn":12},{"ruleId":"46","severity":1,"message":"50","line":12,"column":10,"nodeType":"48","messageId":"49","endLine":12,"endColumn":15},{"ruleId":"46","severity":1,"message":"51","line":13,"column":10,"nodeType":"48","messageId":"49","endLine":13,"endColumn":13},{"ruleId":"46","severity":1,"message":"52","line":18,"column":22,"nodeType":"48","messageId":"49","endLine":18,"endColumn":35},{"ruleId":"46","severity":1,"message":"53","line":19,"column":10,"nodeType":"48","messageId":"49","endLine":19,"endColumn":24},{"ruleId":"46","severity":1,"message":"54","line":19,"column":26,"nodeType":"48","messageId":"49","endLine":19,"endColumn":43},{"ruleId":"46","severity":1,"message":"55","line":28,"column":15,"nodeType":"48","messageId":"49","endLine":28,"endColumn":21},{"ruleId":"56","severity":1,"message":"57","line":99,"column":15,"nodeType":"58","endLine":99,"endColumn":81},{"ruleId":"56","severity":1,"message":"57","line":109,"column":15,"nodeType":"58","endLine":109,"endColumn":81},{"ruleId":"46","severity":1,"message":"59","line":78,"column":9,"nodeType":"48","messageId":"49","endLine":78,"endColumn":11},{"ruleId":"46","severity":1,"message":"60","line":1,"column":17,"nodeType":"48","messageId":"49","endLine":1,"endColumn":25},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'start' is assigned a value but never used.","'end' is assigned a value but never used.","'setUnitOption' is assigned a value but never used.","'realtimeOption' is assigned a value but never used.","'setRealtimeOption' is assigned a value but never used.","'setNow' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'ts' is assigned a value but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]
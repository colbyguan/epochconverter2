{"version":3,"sources":["components/CopyIcon.js","components/CopyableRow.js","helpers.js","App.js","reportWebVitals.js","index.js"],"names":["CopyIcon","props","xmlns","fill","viewBox","stroke","width","height","className","hovered","strokeLinecap","strokeLinejoin","strokeWidth","d","borderColorFromOffset","offset","timeTextFromNowAndOffset","now","CopyableTime","alignLeft","onClick","copy","ts","handleCopySuccess","borderColor","delimiter","CopyableRow","startBorderColor","startOffset","endBorderColor","endOffset","disableBorder","useState","setHovered","startTime","endTime","onMouseEnter","e","onMouseLeave","toCopy","handleCopyFail","_MULTIPLIERS","timeStringToOffset","s","length","unit","charAt","num","substring","QUICK_TIMESTAMPS","QUICK_LABELS","utcStringToTimeThenDate","utcStr","tokens","split","App","start","setStart","end","setEnd","setDelimiter","setStartOffset","setEndOffset","lastFocusedWasStart","setLastFocusedWasStart","ringInput","setRingInput","flashQuickFillLabel","setFlashQuickFillLabel","flashTimeouts","setFlashTimeouts","toast","setToast","toastColor","setToastColor","toastFade","setToastFade","toastMove","setToastMove","timeouts","setTimeouts","Math","round","Date","nowDate","setUTCSeconds","window","gtag","setTimeout","forEach","t","clearTimeout","push","changeQuickFillLabel","wasStart","toLocaleTimeString","toLocaleDateString","toUTCString","map","rowIdx","timestamp","htmlFor","type","id","value","onChange","target","name","clsx","onFocus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a024d63.chunk.js","sourcesContent":["import React from \"react\";\n\nconst CopyIcon = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n      width=\"20px\"\n      height=\"20px\"\n      className={\"transform transition mt-0.5 text-gray-600 group-hover:text-black group-hover:scale-125 \" + (props.hovered ? \"text-black scale-125\" : \"\")}\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={2}\n        d=\"M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z\"\n      />\n    </svg>\n  );\n};\n\nexport default CopyIcon;\n","import React, { useState } from \"react\";\nimport CopyIcon from \"./CopyIcon\";\nimport copy from 'copy-to-clipboard';\n\nconst CopyableRow = (props) => {\n  let startBorderColor = borderColorFromOffset(props.startOffset);\n  let endBorderColor = borderColorFromOffset(props.endOffset);\n  if (props.disableBorder === true) {\n    startBorderColor = \"border-white\";\n    endBorderColor = \"border-white\";\n  }\n  const [hovered, setHovered] = useState(false);\n\n  let startTime = timeTextFromNowAndOffset(props.now, props.startOffset);\n  let endTime = timeTextFromNowAndOffset(props.now, props.endOffset);\n\n  const handleEnter = (e) => {\n    setHovered(true);\n  };\n  const handleLeave = (e) => {\n    setHovered(false);\n  };\n  const copyStartEnd = () => {\n    const toCopy = startTime + props.delimiter + endTime;\n    copy(toCopy);\n    props.handleCopySuccess(toCopy);\n  };\n\n  return (\n    <div className={\"card-grid \" + (hovered ? \"card-grid-hovered bg-yellow-200 \" : \"\")}>\n      <div\n        onMouseEnter={handleEnter}\n        onMouseLeave={handleLeave}\n        onClick={copyStartEnd}\n        className={\"border hover:border-0 my-1 py-2 px-4 side-col text-sm cursor-pointer hover:bg-yellow-200 rounded-sm flex flex-row items-center justify-end font-medium py-2 px-4 \" +\n          (hovered ? \"\" : \"app-shadow-sm\")}\n      >\n        <CopyIcon hovered={hovered} />\n        <span className=\"ml-0.5\">start{props.delimiter}end</span>\n      </div>\n      <CopyableTime\n        borderColor={startBorderColor}\n        alignLeft={true}\n        ts={startTime}\n        hovered={hovered}\n        delimiter={props.delimiter}\n        handleCopySuccess={props.handleCopySuccess}\n        handleCopyFail={props.handleCopyFail}\n      />\n      <CopyableTime\n        borderColor={endBorderColor}\n        ts={endTime}\n        hovered={hovered}\n        delimiter={props.delimiter}\n        handleCopySuccess={props.handleCopySuccess}\n        handleCopyFail={props.handleCopyFail}\n      />\n    </div>\n  );\n};\n\nconst borderColorFromOffset = (offset) => {\n  if (offset < 0) {\n    return \"border-red-500\";\n  } else if (offset === 0) {\n    return \"border-gray-200\";\n  } else {\n    return \"border-green-500\";\n  }\n};\nconst timeTextFromNowAndOffset = (now, offset) => {\n  if (offset < 0) {\n    return \"bad input\";\n  } else {\n    return now - offset;\n  }\n};\n\nconst CopyableTime = (props) => {\n  const hovered = props.hovered;\n  const alignLeft = props.alignLeft;\n\n  const copyTs = () => {\n    copy(props.ts);\n    props.handleCopySuccess(props.ts);\n  };\n\n  return (\n    <div\n      onClick={copyTs}\n      className={\n        \"copyable-time group \" +\n        (hovered\n          ? \"bg-yellow-200 rounded-none border-yellow-200 \"\n          : props.borderColor + \" rounded-sm app-shadow-sm \") +\n        (hovered && alignLeft ? \"rounded-l-sm\" : \"rounded-r-sm\")\n      }\n    >\n      {!hovered ? <CopyIcon hovered={hovered} /> : \"\"}\n      <div className={\"w-full font-medium \" +\n        (hovered && alignLeft ? \"text-right \" : \"\") +\n        (hovered && !alignLeft ? \"-ml-8 \" : \"\")}>\n        {props.ts + (hovered && alignLeft ? `${props.delimiter}` : \"\")}\n      </div>\n    </div>\n  );\n};\n\nexport default CopyableRow;\n","\nconst _MULTIPLIERS = {\n    's': 1,\n    'm': 60,\n    'h': 60 * 60,\n    'd': 24 * 60 * 60,\n}\n\n// Returns: \n// 0 if user probably still typing input / empty str\n// -1 if bad format\n// otherwise seconds to substract from current time\nconst timeStringToOffset = s => {\n    if (s.length < 3) {\n        return 0;\n    }\n    const unit = s.charAt(s.length - 1);\n    if (unit in _MULTIPLIERS) {\n        const num = s.substring(1, s.length - 1);\n        return _MULTIPLIERS[unit] * num;\n    } else {\n        return -1;\n    }\n}\n\nexport {timeStringToOffset}\n","import React, { useState } from \"react\";\nimport clsx from 'clsx';\nimport CopyableRow from \"./components/CopyableRow\";\nimport { timeStringToOffset } from \"./helpers\";\n\n// const UNIT_OPTIONS = ['both', 'millis', 'seconds']\n// const REALTIME_OPTIONS = ['page load', 'realtime']\nconst QUICK_TIMESTAMPS = [\n  ['-0m', '-5m', '-10m', '-15m', '-30m'],\n  ['-1h', '-2h', '-4h', '-8h', '-12h', '-24h', '-36h'],\n  ['-1d', '-2d', '-4d', '-7d']]\nconst QUICK_LABELS = ['minutes', 'hours', 'days'];\n\nfunction utcStringToTimeThenDate(utcStr) {\n  const tokens = utcStr.split(' ');\n  return `${tokens[4]} ${tokens[5]} ${tokens[0]} ${tokens[1]} ${tokens[2]} ${tokens[3]}`;\n}\n\nfunction App() {\n  // Time values\n  const [start, setStart] = useState(\"\");\n  const [end, setEnd] = useState(\"\");\n  const [delimiter, setDelimiter] = useState(\":\");\n  const [startOffset, setStartOffset] = useState(0);\n  const [endOffset, setEndOffset] = useState(0);\n  const [lastFocusedWasStart, setLastFocusedWasStart] = useState(true);\n  const [ringInput, setRingInput] = useState(false);\n  const [flashQuickFillLabel, setFlashQuickFillLabel] = useState(true);\n  let [flashTimeouts, setFlashTimeouts] = useState([]);\n\n  // Options\n  // const [unitOption, setUnitOption] = useState(0)\n  // const [realtimeOption, setRealtimeOption] = useState(0)\n\n  // Animation\n  const [toast, setToast] = useState(\"hello\");\n  const [toastColor, setToastColor] = useState(\"white\");\n  const [toastFade, setToastFade] = useState(false);\n  const [toastMove, setToastMove] = useState(false);\n  let [timeouts, setTimeouts] = useState([]);\n\n  const [now] = useState(Math.round(Date.now() / 1000));\n  const nowDate = new Date(0);\n  nowDate.setUTCSeconds(now);\n\n  const handleQuickTimestamp = (ts) => {\n    if (lastFocusedWasStart) {\n      setStart(ts);\n      setStartOffset(timeStringToOffset(ts));\n    } else {\n      setEnd(ts);\n      setEndOffset(timeStringToOffset(ts));\n    }\n  }\n  const handleStartChange = (e) => {\n    setStart(e.target.value);\n    setStartOffset(timeStringToOffset(e.target.value));\n  };\n  const handleEndChange = (e) => {\n    setEnd(e.target.value);\n    setEndOffset(timeStringToOffset(e.target.value));\n  };\n  const handleDelimChange = (e) => {\n    setDelimiter(e.target.value);\n  }\n  const handleCopySuccess = (s) => {\n    setToast(\"Copied \" + s);\n    window.gtag('event', 'copy', {\n      'event_category': 'user_action',\n      'event_label': 'copied',\n      'value': s\n    })\n    setToastColor(\"bg-green-500\");\n    setToastFade(true);\n    setToastMove(false);\n\n    if (toast === \"hello\") {\n      setToastFade(false);\n      setToastMove(true);\n    } else {\n      setTimeout(() => {\n        setToastFade(false);\n        setToastMove(true);\n      }, 150);\n    }\n\n    timeouts.forEach((t) => {\n      clearTimeout(t);\n    });\n    timeouts = [];\n    timeouts.push(\n      setTimeout(() => {\n        setToastFade(true);\n        setToastMove(false);\n      }, 3000)\n    );\n    setTimeouts(timeouts);\n  };\n\n  const changeQuickFillLabel = (wasStart) => {\n    setLastFocusedWasStart(wasStart)\n    setFlashQuickFillLabel('bg-blue-200')\n    flashTimeouts.forEach((t) => {\n      clearTimeout(t);\n    });\n    flashTimeouts = []\n    flashTimeouts.push(setTimeout(() => setFlashQuickFillLabel('bg-transparent'), 1000))\n    setFlashTimeouts(flashTimeouts)\n  }\n\n  const handleCopyFail = (s) => {\n    setToast(\"Fail to copy \" + s);\n    setToastColor(\"bg-red-500\");\n  };\n\n  return (\n    <div className=\"container mx-auto\">\n      <div className=\"max-w-3xl mx-auto\">\n        <div\n          className={\n            \"mt-5 h-auto w-full p-4 my-4 mx-auto rounded-md text-center text-xl border text-white \"\n            + toastColor + \" \" +\n            (toastFade ? \"opacity-0 \" : \"\") +\n            \"transition transform duration-300  \" +\n            (toastMove\n              ? \"translate-y-0 opacity-1 \"\n              : \"-translate-y-8 opacity-0\")\n          }\n        >\n          {toast}\n        </div>\n\n        {/* <div className=\"vspace\">\n          <div className=\"inline-flex mr-1\">Show units: </div>\n          <div className=\"cursor-pointer inline-flex shadow-sm -space-x-px\">\n            {UNIT_OPTIONS.map((optionName, i) => (\n              <a className={\"option-btn \" + (i === unitOption ? \"active\" : \"\")}>\n                {optionName}\n              </a>\n            ))}\n          </div>\n        </div>\n        <div className=\"vspace\">\n          <div className=\"inline-flex mr-1\">Use \"now\" time of: </div>\n          <div className=\"cursor-pointer inline-flex shadow-sm -space-x-px\">\n            {REALTIME_OPTIONS.map((optionName, i) => (\n              <a className={\"option-btn \" + (i === unitOption ? \"active\" : \"\")}>\n                {optionName}\n              </a>\n            ))}\n          </div>\n        </div> */}\n        <div className=\"card-container\">\n          <div className=\"card-grid mt-10 mb-6\">\n            <div className=\"side-col\"></div>\n            <div className=\"double-main-col relative\">\n              <div className=\"mb-2\"><span className=\"text-3xl font-bold\">{now}</span> as the \"now\" time</div>\n              <div className=\"text-sm text-gray-500\"><span className=\"font-semibold\">or, {nowDate.toLocaleTimeString()} {nowDate.toLocaleDateString()}</span> locally </div>\n              <div className=\"text-sm text-gray-500\"><span className=\"font-semibold\">or, {utcStringToTimeThenDate(nowDate.toUTCString())}</span></div>\n            </div>\n          </div>\n          <div className=\"card-grid mb-6\">\n            <div className=\"side-col\"></div>\n            <div className=\"double-main-col relative\">\n              <div className=\"textinput-label mb-1\">quick fill <span className={'transition-colors ' + flashQuickFillLabel}>{(lastFocusedWasStart ? \"start time\" : \"end time\")}:</span></div>\n              {QUICK_TIMESTAMPS.map((unit, rowIdx) =>\n                <div className=\"\">\n                  {unit.map(timestamp => (\n                    <div\n                      className={\"w-10 p-1 text-sm text-right cursor-pointer inline-block font-mono border-gray-300 hover:bg-blue-200 \" + (rowIdx === 1 ? \"\" : \"\")}\n                      onClick={(e) => handleQuickTimestamp(timestamp)}\n                      onMouseEnter={() => setRingInput(true)}\n                      onMouseLeave={() => setRingInput(false)}\n                      key={timestamp}>\n                      {timestamp}\n                    </div>\n                  ))}\n                  <span className=\"ml-1 text-xs font-bold text-gray-400\">({QUICK_LABELS[rowIdx]})</span>\n                </div>)}\n              <div className=\"delimiter absolute top-0 right-0\">\n                <label\n                  htmlFor=\"start_time\"\n                  className=\"textinput-label\"\n                >\n                  Delimiter\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"delimiter\"\n                  className={'textinput'}\n                  value={delimiter}\n                  onChange={handleDelimChange}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"card-grid mb-6\">\n            <div className=\"side-col\"></div>\n            <div className=\"main-col cursor-pointer\">\n              <label\n                htmlFor=\"start_time\"\n                className=\"textinput-label\"\n              >\n                Start time (ex: -1d, -4h)\n              </label>\n              <input\n                type=\"text\"\n                name=\"start_time\"\n                id=\"start_time\"\n                className={clsx((ringInput && lastFocusedWasStart && 'border-blue-400') || 'border-gray-300', 'textinput')}\n                onChange={handleStartChange}\n                onFocus={(e) => changeQuickFillLabel(true)}\n                value={start}\n              />\n            </div>\n            <div className=\"main-col cursor-pointer\">\n              <label\n                htmlFor=\"end_time\"\n                className=\"textinput-label\"\n              >\n                End time (click for quick fill)\n              </label>\n              <input\n                type=\"text\"\n                name=\"end_time\"\n                id=\"end_time\"\n                className={clsx((ringInput && !lastFocusedWasStart && 'border-blue-400') || 'border-gray-300', 'textinput')}\n                onChange={handleEndChange}\n                onFocus={(e) => changeQuickFillLabel(false)}\n                value={end}\n              />\n            </div>\n          </div>\n          <div className=\"card-grid mt-4 text-gray-400 text-sm font-medium\">\n            <div className=\"side-col\"></div>\n            <div className=\"main-col\">seconds</div>\n          </div>\n\n          <CopyableRow\n            now={now}\n            startOffset={startOffset}\n            endOffset={endOffset}\n            delimiter={delimiter}\n            handleCopySuccess={handleCopySuccess}\n            handleCopyFail={handleCopyFail}\n          />\n          <div className=\"card-grid mt-4 text-gray-400 text-sm font-medium\">\n            <div className=\"side-col\"></div>\n            <div className=\"main-col\">millis</div>\n          </div>\n          <CopyableRow\n            now={now * 1000}\n            startOffset={startOffset * 1000}\n            endOffset={endOffset * 1000}\n            delimiter={delimiter}\n            handleCopySuccess={handleCopySuccess}\n            handleCopyFail={handleCopyFail}\n          />\n          <div className=\"my-10 h-1 w-1\"></div>\n        </div>\n        {/* <div className=\"text-lg font-medium leading-6 text-gray-900 mt-5\">\n          Previous timestamps\n        </div>\n        <div className=\"card-container\">\n          Feature coming soon\n        </div> */}\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
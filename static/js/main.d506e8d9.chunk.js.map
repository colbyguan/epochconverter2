{"version":3,"sources":["components/CopyIcon.js","logo.svg","components/CopyableRow.js","helpers.js","App.js","reportWebVitals.js","index.js"],"names":["CopyIcon","props","xmlns","fill","viewBox","stroke","width","height","className","strokeLinecap","strokeLinejoin","strokeWidth","d","borderColorFromOffset","offset","timeTextFromNowAndOffset","now","CopyableTime","hovered","alignLeft","ts","onClick","console","log","copy","handleCopySuccess","borderColor","CopyableRow","startBorderColor","startOffset","endBorderColor","endOffset","disableBorder","useState","setHovered","startTime","endTime","onMouseEnter","e","onMouseLeave","toCopy","handleCopyFail","_MULTIPLIERS","timeStringToOffset","s","length","unit","charAt","num","substring","UNIT_OPTIONS","REALTIME_OPTIONS","App","setStart","setEnd","setStartOffset","setEndOffset","unitOption","toast","setToast","toastColor","setToastColor","toastFade","setToastFade","toastMove","setToastMove","timeouts","setTimeouts","Math","round","Date","nowDate","setUTCSeconds","nowFormatted","toLocaleString","setTimeout","forEach","t","clearTimeout","push","map","optionName","i","htmlFor","type","name","id","onChange","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d506e8d9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst CopyIcon = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n      width=\"20px\"\n      height=\"20px\"\n      className=\"transform transition mt-0.5 text-gray-600 group-hover:text-black group-hover:scale-110\"\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={2}\n        d=\"M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z\"\n      />\n    </svg>\n  );\n};\n\nexport default CopyIcon;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from \"react\";\nimport CopyIcon from \"./CopyIcon\";\nimport copy from 'copy-to-clipboard';\n\nconst CopyableRow = (props) => {\n  let startBorderColor = borderColorFromOffset(props.startOffset);\n  let endBorderColor = borderColorFromOffset(props.endOffset);\n  if (props.disableBorder === true) {\n    startBorderColor = \"border-white\";\n    endBorderColor = \"border-white\";\n  }\n  const [hovered, setHovered] = useState(false);\n\n  let startTime = timeTextFromNowAndOffset(props.now, props.startOffset);\n  let endTime = timeTextFromNowAndOffset(props.now, props.endOffset);\n\n  const handleEnter = (e) => {\n    setHovered(true);\n  };\n  const handleLeave = (e) => {\n    setHovered(false);\n  };\n  const copyStartEnd = () => {\n    const toCopy = startTime + \":\" + endTime;\n    copy(toCopy);\n    props.handleCopySuccess(toCopy);\n  };\n\n  return (\n    <div className={\"grid grid-cols-3 px-2 \" + (hovered ? \"gap-0\" : \"gap-2\")}>\n      <div\n        onMouseEnter={handleEnter}\n        onMouseLeave={handleLeave}\n        onClick={copyStartEnd}\n        className=\"group cursor-pointer hover:bg-yellow-200 rounded-md flex flex-row m-1 px-2 py-1\"\n      >\n        <CopyIcon />\n        start:end\n      </div>\n      <CopyableTime\n        borderColor={startBorderColor}\n        alignLeft={true}\n        ts={startTime}\n        hovered={hovered}\n        handleCopySuccess={props.handleCopySuccess}\n        handleCopyFail={props.handleCopyFail}\n      />\n      <CopyableTime\n        borderColor={endBorderColor}\n        ts={endTime}\n        hovered={hovered}\n        handleCopySuccess={props.handleCopySuccess}\n        handleCopyFail={props.handleCopyFail}\n      />\n    </div>\n  );\n};\n\nconst borderColorFromOffset = (offset) => {\n  if (offset < 0) {\n    return \"border-red-500\";\n  } else if (offset === 0) {\n    return \"border-gray-300\";\n  } else {\n    return \"border-green-500\";\n  }\n};\nconst timeTextFromNowAndOffset = (now, offset) => {\n  if (offset < 0) {\n    return \"bad input\";\n  } else {\n    return now - offset;\n  }\n};\n\nconst CopyableTime = (props) => {\n  const hovered = props.hovered;\n  const ts = props.ts;\n  const alignLeft = props.alignLeft;\n\n  const copyTs = () => {\n    console.log(props.ts);\n    copy(props.ts);\n    props.handleCopySuccess(props.ts);\n  };\n\n  return (\n    <div\n      onClick={copyTs}\n      className={\n        \"group border w-full cursor-pointer hover:bg-blue-200 flex flex-row my-1 px-2 py-1 \" +\n        (hovered\n          ? \"bg-yellow-300 rounded-none border-yellow-300 \"\n          : props.borderColor + \" rounded-md \") +\n        (hovered && alignLeft ? \"rounded-l-md \" : \"rounded-r-md\")\n      }\n    >\n      {!hovered ? <CopyIcon /> : \"\"}\n      <div className={\"w-full \" + (hovered && alignLeft ? \"text-right\" : \"\")}>\n        {props.ts + (hovered && alignLeft ? \" : \" : \"\")}\n      </div>\n    </div>\n  );\n};\n\nexport default CopyableRow;\n","\nconst _MULTIPLIERS = {\n    's': 1,\n    'm': 60,\n    'h': 60 * 60,\n    'd': 24 * 60 * 60,\n}\n\n// Returns: \n// 0 if user probably still typing input / empty str\n// -1 if bad format\n// otherwise seconds to substract from current time\nconst timeStringToOffset = s => {\n    console.log(s);\n    if (s.length < 3) {\n        return 0;\n    }\n    const unit = s.charAt(s.length - 1);\n    if (unit in _MULTIPLIERS) {\n        const num = s.substring(1, s.length - 1);\n        return _MULTIPLIERS[unit] * num;\n    } else {\n        return -1;\n    }\n}\n\nexport {timeStringToOffset}\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport CopyableRow from \"./components/CopyableRow\";\nimport { timeStringToOffset } from \"./helpers\";\n\nconst UNIT_OPTIONS = ['both', 'millis', 'seconds']\nconst REALTIME_OPTIONS = ['page load', 'realtime']\n\nfunction App() {\n  // Time values\n  const [start, setStart] = useState(\"\");\n  const [end, setEnd] = useState(\"\");\n  const [startOffset, setStartOffset] = useState(0);\n  const [endOffset, setEndOffset] = useState(0);\n\n  // Options\n  const [unitOption, setUnitOption] = useState(0)\n  const [realtimeOption, setRealtimeOption] = useState(0)\n\n  // Animation\n  const [toast, setToast] = useState(\"hello\");\n  const [toastColor, setToastColor] = useState(\"white\");\n  const [toastFade, setToastFade] = useState(false);\n  const [toastMove, setToastMove] = useState(false);\n  let [timeouts, setTimeouts] = useState([]);\n  \n  const [now, setNow] = useState(Math.round(Date.now() / 1000));\n  const nowDate = new Date(0);\n  nowDate.setUTCSeconds(now);\n  const nowFormatted = nowDate.toLocaleString();\n\n  const handleStartChange = (e) => {\n    setStart(e.target.value);\n    setStartOffset(timeStringToOffset(e.target.value));\n  };\n  const handleEndChange = (e) => {\n    setEnd(e.target.value);\n    setEndOffset(timeStringToOffset(e.target.value));\n  };\n  const handleCopySuccess = (s) => {\n    setToast(\"Copied \" + s);\n    setToastColor(\"green\");\n    setToastFade(true);\n    setToastMove(false);\n\n    if (toast === \"hello\") {\n      setToastFade(false);\n      setToastMove(true);\n    } else {\n      setTimeout(() => {\n        setToastFade(false);\n        setToastMove(true);\n      }, 150);\n    }\n\n    timeouts.forEach((t) => {\n      clearTimeout(t);\n    });\n    timeouts = [];\n    timeouts.push(\n      setTimeout(() => {\n        setToastFade(true);\n        setToastMove(false);\n      }, 3000)\n    );\n    setTimeouts(timeouts);\n  };\n  const handleCopyFail = (s) => {\n    setToast(\"Fail to copy \" + s);\n    setToastColor(\"red\");\n  };\n\n  return (\n    <div className=\"container mx-auto\">\n      <div className=\"max-w-xl mx-auto\">\n        <div\n          className={\n            \"mt-5 h-auto w-full p-4 my-4 mx-auto rounded-md text-center text-xl \" +\n            \"border text-white bg-\" +\n            toastColor +\n            \"-500 \" +\n            (toastFade ? \"opacity-0 \" : \"\") +\n            \"transition transform duration-300  \" +\n            (toastMove\n              ? \"translate-y-0 opacity-1 \"\n              : \"-translate-y-8 opacity-0\")\n          }\n        >\n          {toast}\n        </div>\n        <div className=\"vspace\">\n          <span className=\"now\">{now}</span> or <span className=\"now\">{nowFormatted}</span> as the \"now\" time\n        </div>\n        <div className=\"vspace\">\n          <div className=\"inline-flex mr-1\">Show units: </div>\n          <div className=\"cursor-pointer inline-flex shadow-sm -space-x-px\">\n            {UNIT_OPTIONS.map((optionName, i) => (\n              <a className={\"option-btn \" + (i === unitOption ? \"active\" : \"\")}>\n                {optionName}\n              </a>\n            ))}\n          </div>\n        </div>\n        <div className=\"vspace\">\n          <div className=\"inline-flex mr-1\">Use \"now\" time of: </div>\n          <div className=\"cursor-pointer inline-flex shadow-sm -space-x-px\">\n            {REALTIME_OPTIONS.map((optionName, i) => (\n              <a className={\"option-btn \" + (i === unitOption ? \"active\" : \"\")}>\n                {optionName}\n              </a>\n            ))}\n          </div>\n        </div>\n        <div className=\"card-container\">\n          <div className=\"grid grid-cols-3 gap-2\">\n            <div></div>\n            <div>\n              <label\n                htmlFor=\"start_time\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                Start time\n              </label>\n              <input\n                type=\"text\"\n                name=\"start_time\"\n                id=\"start_time\"\n                className=\"textinput\"\n                onChange={handleStartChange}\n              />\n            </div>\n            <div>\n              <label\n                htmlFor=\"end_time\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                End time\n              </label>\n              <input\n                type=\"text\"\n                name=\"end_time\"\n                id=\"end_time\"\n                className=\"textinput\"\n                onChange={handleEndChange}\n              />\n            </div>\n          </div>\n          <CopyableRow\n            now={now}\n            startOffset={startOffset}\n            endOffset={endOffset}\n            handleCopySuccess={handleCopySuccess}\n            handleCopyFail={handleCopyFail}\n          />\n          <CopyableRow\n            now={now * 1000}\n            startOffset={startOffset * 1000}\n            endOffset={endOffset * 1000}\n            handleCopySuccess={handleCopySuccess}\n            handleCopyFail={handleCopyFail}\n          />\n        </div>\n        <div className=\"text-lg font-medium leading-6 text-gray-900 mt-5\">\n          Previous timestamps\n        </div>\n        <div className=\"card-container\">\n        Feature coming soon\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}